name: üõ†Ô∏è CI/CD - Development & Test Deploy

on:
  push:
    branches:
      - development
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - development

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

jobs:
  ci:
    name: Build, Test, and Analyze with SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm ci

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

  informe-sonar:
    name: Generate Sonar Report (Python)
    needs: ci
    runs-on: ubuntu-latest
    if: success()
    env:
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      GH_PAT: ${{ secrets.GH_PAT }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      OWNER: ${{ secrets.OWNER }}
      REPO: ${{ secrets.REPO }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run report generation
        run: python scripts/report_commit.py
  
  deploy-test:
    name: Deploy to Vercel (Test Environment)
    runs-on: ubuntu-latest
    # Se ejecuta solo despu√©s de que el informe de Sonar (y CI) haya terminado con √©xito.
    needs: informe-sonar 
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_TEST }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel (Test)
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
